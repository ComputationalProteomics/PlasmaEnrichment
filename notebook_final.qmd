---
title: "Data Analysis"
author: "Sergio Mosquim Junior"
format:
    html:
        code-fold: true
        code-tools: true
        embed-resources: true
        number-sections: true
        smooth-scroll: true
        theme: cosmo
        toc-depth: 2
        toc-location: left
        toc: true
        warning: false
params:
  ncols: 1
engine: knitr
---

# Required Libraries
```{r Libraries}
#| warning: false
#| message: false

# Preprocessing
library(NormalyzerDE)
library(tidyverse,warn.conflicts = FALSE)
library(sjmisc)

# UpsetR plots
library(ggplot2)
library(ComplexUpset)
library(cowplot)

# Concentration plots
library(ggpubr)
```

# Preprocessing

## Individual CIMS + Plasma
  The file design_individual.tsv contains all run names, whether they were changed or not
  
### Peptide data cleaning
```{r}
#| message: false

dataP <- 'individual-cims/rt-normalisation/cims+plasma/cims+plasma-report.pr_matrix.tsv'
design <- read_tsv(file = 'individual-cims/design_individual.tsv')
data <- read_tsv(dataP) %>% 
  filter(str_detect(string = Protein.Group,pattern = '^Cont\\_{1}[:alnum:]{6}(?!\\;)',negate = TRUE))
dataReduced <- data %>% 
  dplyr::select(design$raw_path)
newNames <- design$new_name
colnames(dataReduced) <- newNames

dataClean <- data %>% 
  dplyr::select(c(1:10)) %>% 
  bind_cols(.,dataReduced)

write_tsv(x = dataClean,file = 'individual-cims/rt-normalisation/cims+plasma/peptide_table_clean.tsv')
```

### Peptide-level Normalization
```{r}
jobName <- 'cims-pep-normalisation'
dataP <- 'individual-cims/rt-normalisation/cims+plasma/peptide_table_clean.tsv'
designP <- 'individual-cims/design_individual.tsv'
outputP <- 'individual-cims/rt-normalisation/cims+plasma/'

normalyzer(jobName = jobName,designPath = designP,dataPath = dataP,outputDir = outputP,normalizeRetentionTime = FALSE,zeroToNA = TRUE,sampleColName = 'new_name',groupColName = 'group',requireReplicates = FALSE)
```

### Sort peptides alphabetically
```{r}
sortIds <- function(data,proteinColumn = 'Protein.Ids',...){
  data <- pull(data,proteinColumn) %>% 
    str_split(string = .,pattern = ';') %>% 
    map(.x = .,.f = str_sort) %>% 
    map(.x = .,.f = function(x) paste0(x,collapse = ';')) %>% 
    unlist %>% 
    mutate(data,Protein.ID=.,.before=colnames(data[2])) %>% 
    dplyr::select(-proteinColumn)
  names(data)[names(data)=='Protein.ID'] <- 'Protein'
  return(data)
}
```
```{r}
#| message: false
data <- read_tsv(file = 'individual-cims/rt-normalisation/cims+plasma/cims-pep-normalisation/CycLoess-normalized.txt') %>%  
  sortIds(data = .,proteinColumn = 'Protein.Ids')

write_tsv(x = data,file = 'individual-cims/rt-normalisation/cims+plasma/cims-pep-normalisation/cycloess-sorted.tsv')
```

### Protein Rollup
```{bash}
Rscript ~/GPS_2023/Algorithms/ProteinRollup-master/R/protein_rollup.R \
    --rdf_fp ~/GPS_2023/individual-cims/rt-normalisation/cims+plasma/cims-pep-normalisation/cycloess-sorted.tsv \
    --ddf_fp ~/GPS_2023/individual-cims/design_individual.tsv \
    --sample_col new_name \
    --protein_col Protein \
    --out_fp ~/GPS_2023/individual-cims/rt-normalisation/cims+plasma/cims-pep-normalisation/cycloess-sorted-RRollup.tsv
```


## Multiplexed CIMS
### Peptide data cleaning
```{r}
#| message: false

dataP <-  'combined-cims/combined+individual/report.pr_matrix.tsv'
design <- read_tsv(file = 'combined-cims/design_multiplex.tsv')

data <- read_tsv(dataP) %>% 
  filter(str_detect(string = Protein.Group,pattern = '^Cont\\_{1}[:alnum:]{6}(?!\\;)',negate = TRUE))
dataReduced <- data %>% 
  dplyr::select(design$raw_path)
newNames <- design$sample_id
colnames(dataReduced) <- newNames

dataClean <- data %>% 
  dplyr::select(c(1:10)) %>% 
  bind_cols(.,dataReduced)

write_tsv(x = dataClean,file = 'combined-cims/combined+individual/peptide_table_clean.tsv')
```

### Peptide-level Normalization
```{r}
jobName <- 'cims-pep-normalisation'
dataP <- 'combined-cims/combined+individual/peptide_table_clean.tsv'
designP <- 'combined-cims/design_multiplex.tsv'
outputP <- 'combined-cims/combined+individual/'

normalyzer(jobName = jobName,designPath = designP,dataPath = dataP,outputDir = outputP,normalizeRetentionTime = FALSE,zeroToNA = TRUE,sampleColName = 'sample_id',groupColName = 'group',requireReplicates = TRUE)
```

### Sort peptides alphabetically
```{r}
#| message: false
data <- read_tsv(file = 'combined-cims/combined+individual/cims-pep-normalisation/CycLoess-normalized.txt') %>%  
  sortIds(data = .,proteinColumn = 'Protein.Ids')

write_tsv(x = data,file = 'combined-cims/combined+individual/cims-pep-normalisation/cycloess-sorted.tsv')
```

### Protein Rollup
```{bash}
Rscript ~/GPS_2023/Algorithms/ProteinRollup-master/R/protein_rollup.R \
    --rdf_fp ~/GPS_2023/combined-cims/combined+individual/cims-pep-normalisation/cycloess-sorted.tsv \
    --ddf_fp ~/GPS_2023/combined-cims/design_multiplex.tsv \
    --sample_col sample_id \
    --protein_col Protein \
    --out_fp ~/GPS_2023/combined-cims/combined+individual/cims-pep-normalisation/cycloess-sorted-RRollup.tsv
```

# Figures
## Figure 1
```{r Figure 1}
#| label: Figure1
#| fig-cap: Number of identified proteins using the different CIMS scFv antibodies. Negative control with beads only. Error bars represent one standard deviation from the mean.
#| fig-cap-location: margin
#| fig-dpi: 600
#| fig-width: 7
#| fig-height: 5
#| message: false
design <- read_tsv(file = 'individual-cims/design_individual.tsv')
design$Replicates[design$group=='NC'] <- 'Negative Control'

data <- read_tsv(file = 'individual-cims/rt-normalisation/cims+plasma/cims-pep-normalisation/cycloess-sorted-RRollup.tsv')
dataOverlap <- data %>% 
  mutate(across(.cols = design$new_name,.fns = ~replace(.x,!is.na(.x),1))) %>% 
  mutate(across(.cols = design$new_name,.fns = ~replace(.x,is.na(.x),0)))

dataReduced <- dataOverlap %>% 
  select(design$new_name)
colnames(dataReduced) <- design$group

protIDs <- dataReduced %>% 
  colSums(.) %>% 
  tibble(Number.IDs=.,group=colnames(dataReduced)) 
idsGroup <- protIDs %>% 
  group_by(group) %>% 
  summarize(Mean=round(mean(x = Number.IDs)),sd=sd(x = Number.IDs,na.rm = TRUE)) 

overallIDs <- tibble(group='Total IDs',Mean = nrow(data))

total <- bind_rows(idsGroup,overallIDs)
varGroups <- design$group %>% unique

cimsOrder <- str_sort(varGroups,numeric = TRUE)
totalOrder <- c('Total IDs',cimsOrder)

figure1 <- ggplot() + 
  geom_col(data = total,mapping = aes(x=factor(x = group,levels = totalOrder),y=Mean),fill='darkgrey') +
  geom_errorbar(data = total,mapping = aes(x=factor(x = group,levels = totalOrder),ymin=Mean-sd,ymax=Mean+sd))+
  theme_pubr()+
  theme(axis.text.x = element_text(angle = 45,hjust = 1),legend.position = 'none')+
  xlab('')

ggsave(filename = 'Figure1.tiff',plot = figure1,device = 'tiff',path = 'Figures/',dpi = 600,units = 'in',width = 7,height = 5,compression = 'lzw')

figure1
```

## Figure 2
The Human Protein Atlas has data in blood from MS experiments which are extracted from the Peptide Atlas. I downloaded the data corresponding to 4608 proteins and that is what is used for estimation of concentration. https://db.systemsbiology.net/sbeams/cgi/PeptideAtlas/GetProteins

URL to recall result set: https://db.systemsbiology.net/sbeams/cgi/shortURL?key=cfc0e0fr
URL to re-execute query: https://db.systemsbiology.net/sbeams/cgi/shortURL?key=bfqj820x
```{r Figure 2}
#| label: Figure2
#| fig-cap: Identified proteins in red (bulk plasma) and blue (enriched) plotted against abundance estimates derived from Peptide Atlas (in black).
#| fig-cap-location: margin
#| #| fig-dpi: 600
#| fig-width: 10
#| fig-height: 10
#| message: false
data <- read_tsv(file = 'individual-cims/rt-normalisation/cims+plasma/cims-pep-normalisation/cycloess-sorted.tsv')
design <- read_tsv('individual-cims/design_individual.tsv')
concData <- read_tsv(file = 'plasma_concentration_peptideatlas.tsv')

designConc <- design %>% 
  mutate(.after = group, Experiment = str_extract(group,pattern='[:alpha:]{2,6}'))

dataOverlap <- data %>% 
  mutate(across(.cols = design$new_name,.fns = ~replace(.x,!is.na(.x),1))) %>% 
  mutate(across(.cols = design$new_name,.fns = ~replace(.x,is.na(.x),0)))

dataReduced <- dataOverlap %>% 
  select(design$new_name) %>% 
  as.data.frame
colnames(dataReduced) <- designConc$group

dataTranspose <- dataReduced %>% t
rownames(dataTranspose) <- designConc$group

dataAggregate <- aggregate(x = dataTranspose,
                           by = list(rownames(dataTranspose)),
                           FUN = sum)

dataReduced <- data_frame(dataAggregate[,2:ncol(dataAggregate)]) %>% 
  rotate_df()
colnames(dataReduced) <- dataAggregate$Group.1

dataRepFilter <- dataReduced %>% 
  dplyr::mutate(across(everything(),~replace(.x,.x<2,0))) %>% 
  dplyr::mutate(across(everything(),~replace(.x,.x>=2,1)))

dataTFinal <- dataRepFilter %>% t
rowNameNew <- rownames(dataTFinal) %>% str_replace(pattern = 'CIMS.+',replacement = 'CIMS')
rownames(dataTFinal) <- rowNameNew
dataAggFinal <- aggregate(x = dataTFinal,by = list(rowNameNew), FUN = sum)
dataReducedFinal <- data_frame(dataAggFinal[,2:ncol(dataAggFinal)]) %>% 
  rotate_df()
colnames(dataReducedFinal) <- dataAggFinal$Group.1

dataExperiment <- dataReducedFinal %>% 
  dplyr::mutate(across(everything(),~replace(.x,.x==0,FALSE))) %>% 
  dplyr::mutate(across(everything(),~replace(.x,.x>0,TRUE))) %>% 
  dplyr::mutate(across(everything(),as.logical))

dataExperiment <- cbind(Protein=dataOverlap$Protein.Group,dataExperiment)
dataLonger <- dataExperiment %>% 
  pivot_longer(cols = designConc$Experiment,names_to = 'Sample',values_to = 'Member') %>% 
  dplyr::filter(Member)


onlyPlasma <- dataLonger %>% 
  filter(Sample=='Plasma') %>%
  dplyr::select(Protein) %>% 
  map(.x = .,.f = ~str_split(string = .x,pattern = ';')) %>% 
  unlist %>% 
  unique

PlasmaFiltered <- concData %>% 
  dplyr::select(biosequence_name,estimated_ng_per_ml) %>% 
  filter(biosequence_name %in% onlyPlasma) %>% 
  mutate(Group='Plasma')

onlyCims <- dataLonger %>% 
  filter(Sample=='CIMS') %>%
  dplyr::select(Protein) %>% 
  map(.x = .,.f = ~str_split(string = .x,pattern = ';')) %>% 
  unlist %>% 
  unique
cimsFiltered <- concData %>% 
  dplyr::select(biosequence_name,estimated_ng_per_ml) %>%
  filter(biosequence_name %in% onlyCims) %>% 
  mutate(Group='CIMS')

concDataFinal <- bind_rows(PlasmaFiltered,cimsFiltered)

figure2 <- ggplot() + 
  geom_point(data = concData,
             mapping = aes(x = fct_reorder(.f = biosequence_name,.x = -log10(estimated_ng_per_ml),.na_rm = FALSE),
                           y = log10(estimated_ng_per_ml),
                           fill = 'PeptideAtlas Human Plasma 2023-04'),color='black',alpha=0.5,shape=21,size=5) +
  geom_point(data = concDataFinal,
             mapping = aes(x = fct_reorder(.f = biosequence_name,.x = -log10(estimated_ng_per_ml),.na_rm = FALSE),
                           y = log10(estimated_ng_per_ml),
                           fill = Group),color='black',alpha=0.5,shape=21,size=5) +
  facet_wrap(facets = ~factor(Group,levels = c('Plasma','CIMS'),labels = c(Plasma='A',CIMS='B')),ncol = 2) + 
  scale_fill_manual(name= 'Source',
                    aesthetics = 'fill',
                    breaks = c('PeptideAtlas Human Plasma 2023-04','Plasma', 'CIMS'),
                    values = c('PeptideAtlas Human Plasma 2023-04' = 'black','Plasma' = 'red', 'CIMS' = 'blue')) +
  scale_x_discrete(labels = NULL,
                   breaks = NULL) + 
  labs(x = 'Rank', 
       y = 'Log10( Estimated conc. ng/mL )') +
  theme_bw()+
  theme(strip.background = element_blank(),
        strip.text = element_text(size = 16,hjust = 0,face = 'bold'),
        axis.title.x = element_text(face = 'bold'),
        axis.title.y = element_text(face = 'bold'),
        legend.title = element_text(face = 'bold'))

ggsave(filename = 'Figure2.tiff',plot = figure2,device = 'tiff',path = 'Figures/',units = 'in',width = 10,height = 10,dpi = 600,compression = 'lzw')

figure2
```

## Figure 3
```{r Figure 3}
#| label: Figure3
#| fig-cap: UpSet plot of peptides identified using the different CIMS scFv antibodies and the negative control (NC) with beads only.
#| fig-cap-location: margin
#| #| fig-dpi: 600
#| fig-width: 20
#| fig-height: 15
#| message: false
data <-  read_tsv(file = 'individual-cims/rt-normalisation/cims+plasma/cims-pep-normalisation/cycloess-sorted.tsv')
design <- read_tsv(file = 'individual-cims/design_individual.tsv')


dataOverlap <- data %>% 
  mutate(across(.cols = design$new_name,.fns = ~replace(.x,!is.na(.x),1))) %>% 
  mutate(across(.cols = design$new_name,.fns = ~replace(.x,is.na(.x),0))) %>% 
  mutate(across(design$new_name,.fns = ~as.logical(.x)))

dataReduced <- dataOverlap %>% 
  dplyr::select(design$new_name)

dataTranspose <- dataReduced %>% t
rownames(dataTranspose) <- design$group

dataAggregate <- aggregate(x = dataTranspose,
                           by = list(rownames(dataTranspose)),
                           FUN = sum)

dataReduced <- data_frame(dataAggregate[,2:ncol(dataAggregate)]) %>% rotate_df()
colnames(dataReduced) <- dataAggregate$Group.1

dataUpset <- dataReduced %>% 
  mutate(across(!contains('CIMS23'),.fns = ~replace(.x,.x<2,FALSE))) %>% 
  mutate(across(!contains('CIMS23'),.fns = ~replace(.x,.x>=2,TRUE))) %>% 
  mutate(across(everything(),~as.logical(.x)))
dataUpset <- cbind(Protein=dataOverlap$Precursor.Id,dataUpset)

cimsOrder <-  design %>% dplyr::filter(str_detect(group, 'CIMS|NC')) %>% select(group) %>% as_vector %>% unique %>% str_sort(.,numeric = TRUE)

figure3 <- upset(data = dataUpset,intersect = cimsOrder,width_ratio = 0.1,height_ratio = 0.8,min_degree=1,min_size=5,name = '')

ggsave(filename = 'Figure3.tiff',plot = figure3,device = 'tiff',path = 'Figures/',dpi = 600,units = 'in',width = 20,height = 15,compression = 'lzw')

figure3
```

## Figure 4
```{r Figure 4 data import}
#| message: false
data <- read_tsv(file = 'combined-cims/combined+individual/peptide_table_clean.tsv')
design <- read_tsv(file = 'combined-cims/design_multiplex.tsv') %>% 
  filter(str_detect(sample_id,'Plasma',negate = TRUE))
```

### Calculate CV matrix
```{r Figure 4 CV calculation}
dataRed <- data %>% 
  dplyr::select(design$sample_id)

dataGroup <- dataRed %>% 
  rotate_df() %>% 
  dplyr::mutate(group=design$group) %>% 
  dplyr::group_by(group)
groupKeys <- group_keys(dataGroup) %>% unlist()
dataCV <- dataGroup %>% 
  group_map(.data = .,.f = ~map(.x = .x,.f = ~raster::cv(x = .x,na.rm = TRUE))) %>% 
  map(as.data.frame) %>% 
  list_rbind() %>% 
  rotate_df()
colnames(dataCV) <- groupKeys
dataCVLonger <- dataCV %>% 
  pivot_longer(cols = everything(),names_to = 'Group',values_to = 'CV')
dataCVFinal <- dataCVLonger %>% 
  mutate(CV_perc=ifelse(CV<10,'CV < 10%',
                        ifelse(CV<20,'CV < 20%',
                               'Average'))) %>% 
  drop_na()
```

### plot
```{r Figure 4 Plot}
#| label: Figure4
#| fig-cap: Number of peptides identified and their coefficient of variation (CV) with different mixes of CIMS scFv antibodies, as well as using individual antibodies separately. Bulk plasma is displayed for comparison.
#| fig-cap-location: margin
#| #| fig-dpi: 600
#| fig-width: 15
#| fig-height: 10
figure4 <- ggplot(dataCVFinal) + 
  geom_bar(mapping = aes(x=fct_infreq(toupper(Group)),
                         fill=factor(CV_perc,levels=c('Average','CV < 20%','CV < 10%'),ordered = TRUE)))+
  scale_fill_manual('CV',values = c('CV < 10%'='#f1a340','CV < 20%'='#998ec3','Average'='lightgrey'))+
  theme_bw()+
  ylab('')+
  xlab('')+
  theme(axis.text.x = element_text(angle = 30))+
  theme_pubr(x.text.angle = 30)
ggsave(filename = 'Figure4.tiff',plot = figure4,device = 'tiff',path = 'Figures/',dpi = 600,units = 'in',width = 15,height = 10,compression = 'lzw')

figure4
```

## Figure 5
```{r Figure 5 data import}
#| message: false
data <-  read_tsv(file = 'combined-cims/combined+individual/cims-pep-normalisation/cycloess-sorted.tsv')
design <- read_tsv(file = 'combined-cims/design_multiplex.tsv') %>% 
  filter(str_detect(sample_id, 'Plasma', negate = TRUE))
```
```{r Figure 5 plot}
#| label: Figure5
#| fig-cap: Overlap UpSet plots for the different mixtures and bulk plasma for reference. (A) UpSet plot for first mixture alongside the individual CIMS antibodies. (B) UpSet plot for the second mixture alongside the individual CIMS antibodies. (C) UpSet plot for the third mixture alongside the individual CIMS antibodies.
#| fig-cap-location: margin
#| fig-dpi: 600
#| fig-width: 20
#| fig-height: 20
dataOverlap <- data %>% 
  mutate(across(.cols = design$sample_id,.fns = ~replace(.x,!is.na(.x),1))) %>% 
  mutate(across(.cols = design$sample_id,.fns = ~replace(.x,is.na(.x),0))) %>% 
  mutate(across(design$sample_id,.fns = ~as.logical(.x)))

dataReduced <- dataOverlap %>% 
  dplyr::select(design$sample_id)

dataTranspose <- dataReduced %>% t
rownames(dataTranspose) <- design$group

dataAggregate <- aggregate(x = dataTranspose,
                           by = list(rownames(dataTranspose)),
                           FUN = sum)

dataReduced <- data_frame(dataAggregate[,2:ncol(dataAggregate)]) %>% rotate_df()
colnames(dataReduced) <- dataAggregate$Group.1

dataUpset <- dataReduced %>% 
  mutate(across(everything(),.fns = ~replace(.x,.x<2,FALSE))) %>% 
  mutate(across(everything(),.fns = ~replace(.x,.x>=2,TRUE))) %>% 
  mutate(across(everything(),~as.logical(.x)))
dataUpset <- cbind(Protein=dataOverlap$Precursor.Id,dataUpset)

mix1 <- c('mix1','cims13','cims14','cims25','plasma')
mix2 <- c('mix2','cims13','cims14','cims25','cims16','cims11','plasma')
mix3 <- c('mix3','cims12','cims8','cims5','cims28','cims9','plasma')

library(ComplexUpset)
upsetMix1 <- upset(data = dataUpset,intersect = mix1,width_ratio = 0.1,height_ratio = 0.8,min_degree=1,min_size=10,name = '',sort_intersections_by = c('degree','ratio'),sort_intersections = 'ascending')
upsetMix2 <- upset(data = dataUpset,intersect = mix2,width_ratio = 0.1,height_ratio = 0.8,min_degree=1,min_size=10,name = '',sort_intersections_by = c('degree','ratio'),sort_intersections = 'ascending')
upsetMix3 <- upset(data = dataUpset,intersect = mix3,width_ratio = 0.1,height_ratio = 0.8,min_degree=1,min_size=10,name = '',sort_intersections_by = c('degree','ratio'),sort_intersections = 'ascending')

figure5 <- cowplot::plot_grid(upsetMix1,upsetMix2,upsetMix3,align = 'v',nrow = 3,ncol = 1,labels = c('A','B','C'))

ggsave(filename = 'Figure5.tiff',plot = figure5,device = 'tiff',path = 'Figures/',units = 'in',width = 20,height = 20,dpi = 600,compression = 'lzw')

figure5
```

# Session info
```{r}
sessionInfo()
```

